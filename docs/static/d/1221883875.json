{"data":{"allGithubData":{"nodes":[{"data":{"user":{"pinnedItems":{"nodes":[{"name":"vs-edu","description":"A VS Code plugin for creating educational courses","homepageUrl":"","url":"https://github.com/piticent123/vs-edu","object":{"text":"# VS Edu\n\nJetbrains made a great educational platform out of IntelliJ IDEA, but unfortunately, it only covers Java, Kotlin, and Python,\nso I'm making a Visual Studio variant\n\nThis extension is early in development and currently only supports \nJavascript with Jest.\n\n# Building\n\nTo build yourself, you must have a Font Awesome Pro license. To generate\nall of the icon files, run the `generate-icons` npm task.\n\nAfter you do that, you can open the extension in VS Code and press F5 to\ndebug as normal.\n\n# Making Tests\n\n\n\n# TODO\n\nThere are numerous things I have planned for this extension:\n\n- [ ] Support all popular languages\n- [ ] Support custom test runners\n- [ ] Add feature to generate a project/new test\n- [ ] Improve performance if possible"}},{"name":"web-calculator","description":"A React based calculator","homepageUrl":"","url":"https://github.com/piticent123/web-calculator","object":{"text":"# Web Calculator\n\nA calculator designed to run on the web, modeled after the TI-84"}},{"name":"telestrations","description":"An electronic version of Telestrations","homepageUrl":"https://telestrations.pitlor.dev","url":"https://github.com/CFCC/telestrations","object":{"text":"# Telestrations\n\nThis is a web version of the game [Telestrations](https://theop.games/products/game/telestrations-12-player-the-party-pack/).\nbecause it is a web based drawing game, it is best played\non a tablet, touch screen computer, or a computer with a\ndrawing tablet. It is possible to use a phone, but you\n may be disappointed with your drawing abilities with such \n a limited canvas.\n \n## Running\n \nThe whole thing can be run in one command:\n \n```bash\n$ yarn start\n```\n\nBeautiful, isn't it?\n"}},{"name":"purdue_directory","description":"An app to search the Purdue directory","homepageUrl":"https://play.google.com/store/apps/details?id=com.jordanpitlor.purduedirectory","url":"https://github.com/piticent123/purdue_directory","object":{"text":"# Purdue Directory\n\nAn app to view the Purdue Directory. Made with [Flutter](http://flutter.io). The app was at one point on the Play Store, but I delisted it and am waiting for the last active install to stop using it to delete it entirely, as Google is aggresive to casual app developers\n\n## This Project\n\nThis project was a small experiment to (a) using Flutter and (b) publishing an app to the Play Store. It was a success in that it was fascinatingly easy. In the end, because of how Google reserves the right to close entire Google accounts associated with apps that aren't updated to use the latest APIs (instead of delisting the app), I don't think I'll do it again, but I don't regret doing it.\n\n## TODO\n\nSupport PGP/GPG keys (which requires an extra HTTP request since it displays in a popup)\n"}},{"name":"piticent123.github.io","description":"My personal website","homepageUrl":"https://www.pitlor.dev","url":"https://github.com/piticent123/piticent123.github.io","object":{"text":"# Personal Website\n\nThis is my personal website. It's made with Gatsby, Bulma, and `react-pdf`\n\n## Design/Development Process\n\nFor a long time, I was unsure what I wanted my personal website to look like.\nAll I knew was that I wanted it to be elegant. It had to:\n\n- Be easy to find information\n- Have a UI that combines the functionality of the 90s era web with the beauty \n  of the modern web\n- Be **fast**\n- Be easy to update\n  \nIt's no secret that a lot of websites don't check enough of these bullets.\nUnfortunately, every website has to make sacrifices, including mine, but I sought\nto check as many of those bullets as I could.\n\n#### Iteration 1\n\nThe first iteration of my website used [a Bootstrap template](https://github.com/StartBootstrap/startbootstrap-resume)\nas most do, and it was _okay_. At that time, I was an underclassman in college and\ndidn't have a ton to fill out my resume with anyway, so I wasn't concerned that it\nwasn't perfect. At that point, I was happy that it was easily expandable, looked relatively\nclean, and didn't look like a Bootstrap template.\n\n#### Iteration 2\n\nEventually, after I got my first full time job, I realized that while the first iteration \nhad served me well, I was ready for something better. I had been exposed to more of\nthe web development world, and I wanted something that fit my needs better.\n\nWhat helped jump start my transition was a [local meetup](https://clereact.dev/) meeting\nteaching how easy it was to make a website with Gatsby and Contentful. As you'll read, it\nactually is quite easy.\n\n**Information I Wanted on my Website**\n\nAt first, I wasn't _really_ sure what I wanted on my website. Probably my name,\nschool, and contact info, but past that, I just knew having an online presence was good.\nAt this point, I knew I wanted:\n\n- One page that housed the same information as my resume, but presented in a more beautiful\n  way, and with the ability to print as a PDF\n- One page for my musical achievements - my compositions, arrangements, and performances\n\nWhile this didn't directly inform my design choices, I think it's important to document, as\nthe information on the site is the most important part. If the site isn't designed around the\ninformation it's communicating or the services it's providing, users will not enjoy using it.\n\n**Deciding on a Tech Stack**\n\nAs discussed earlier, the initial spark into this project was Gatsby. It isn't necessarily groundbreaking,\nbut I loved how easy it made both information aggregation and server side rendering. I could have used\nNext.js for SSR, and I did on future projects, but the information aggregation sold me.\n\nI also decided to use Contentful for my CMS. There wasn't too much decision making here - \nContentful works well with Gatsby, and is easy to use. I could have probably used others, but\nI didn't need much out of a CMS.\n\n**Deciding on a Design**\n\nThe decision process for a library was relatively short. I wanted a library with pre-made components,\nbut something less clunky than Bootstrap. I investigated several libraries, but landed on [Bulma](https://bulma.io/).\nBulma is clean, has the usual pre-made components, in addition to some other commonly used \ncomponents such as modals and boxes.\n\nIn terms of content, I knew from the beginning I wanted my resume and my music on my website, so I \ndecided it was that simple and kept the site to two pages. One for my resume, and one for my music.\n\nThere was a lot of tinkering involved, but eventually I landed on a design that was elegant enough to\nmeet my standards while still not polluting the information with too much design.\n\n**Deploying/Editing Post Development**\n\nOne of my goals was to make my website as easy as humanly possible to edit after deployed.\nIn my initial approach, using Jekyll, this was easy, but still required making additional commits\nto the code. Now, using Contentful, it's incredibly easy! I edit information, hit rebuild, and\neverything is up to date without touching code. The deployment process is subject to change,\nbut the CMS is a welcome addition.\n\n## Running Locally\n\nTo run locally, copy `.env.example`, and fill out values for the keys. Then,\nit is all runnable via `npm`\n\n    $ cp .env.example .env\n    $ # Fill in values for .env\n    $ npm install\n    $ npm start\n"}},{"name":"room-light-automation","description":"A script that automatically turns my ceiling light on/off based on input from PIR sensors connected to a Raspberry Pi","homepageUrl":"","url":"https://github.com/piticent123/room-light-automation","object":{"text":"# Room Light Automation\n\nI had a problem: I wanted an easier way to turn my lights on and off.\nThe only hard requirement to the solution is that I had to be able to control my lights (and preferrably my fan) from both my door and my bed\n\n### The Path to a Solution\n\nThe easiest, most obvious solution was to simply **buy a second remote**. I did not take this route for two reasons: \n1. I did not know for certain if my existing ceiling fan controller was compatible with any \"universal\" remotes, and frankly, if I was going to do that much research, I knew \n   I would be happier in the end simply going down a more complicated path\n2. The pedant in me would have been mad the two remotes were different anyway\n\nMy next step was to **purchase a smart fan controller**. By smart, I mean that it integrates with Google Home/Alexa. This involved purchasing a couple things:\n1. [A new fan controller](https://www.amazon.com/gp/product/B07TRTG8PS)†\n2. A new fan.††\n\n### A Lesson On Friction\n\nI'm not talking about that force you ignored in AP Physics calculating displacement. I'm talking about how easy (or difficult) it is for a user to accomplish their goals\nusing a product. Ironically, I had actually made my problem at this point. To review -\n\nPros:\n1. After connecting with the Google Home app and naming my new device, I could now control my fan/light from anywhere in the room by simply saying \"hey google, turn the\n   light of the ceiling fan [on/off]\"\n2. I could control the light/fan with routines (albeit it was a little tricky since it shows up in the app as a single switch, so it requires voice commands to control the \n   fan speed or light individually)\n\nCons:\n\n**I absolutely hate voice as a UI.** It's bolded because I feel strongly about it. There are use cases where voice is useful. For example, asking for things like measuring\nconversions and recipe instructions while cooking and you can't access your phone because of dirty hands. Also, when your question is simple enough that the reduced detail a\nvoice assistant will give you will still satisfy you (for example, most weather related questions, or simple things like \"when is Lin Manuel Miranda's birthday?\").\n\nHowever, previously I would hit a button on my remote as I walked in the room. Given my muscle memory, this introduced no additional friction to the process of entering my\nbedroom. At this point, I would enter my room, stand in the doorway (I preferred this to completing my task in the dark), say \"hey google, turn the light of the ceiling fan\non\", wait several seconds for the light to turn on, then go about my day. Double this for exiting the room, and you can do the math on how much friction this introduced.\n\n### The Final Frontier\n\nThere was only one possible way to remove the friction while maintaining the newly gained benefits: motion sensors.\n\nThis step required the purchase of more things:\n1. [PIR Sensors](https://www.amazon.com/gp/product/B07KZW86YR)\n2. A Raspberry Pi. Depending on how permenant you want this to be, you could soulder the PIR sensor to the GPIO pins/power supply, but I recommend also getting a breadboard,\n   some plain wires, and some jumper wires.†††\n3. An enclosure. I wanted to 3D print one, but I made this during COVID-19 times, so my library reduced a lot of their services. I instead fashioned one out of LEGO.\n\nIt was at this point I realized I was *very* lucky. I just *happened* to purchase a Sonoff fan controller, which used the eWeLink app to get its smart functionality, and\neWeLink has a fantastic API, and conveniently, a community-made Node wrapper as an npm package. This may not be luck. In fact, it might be common, but I wasn't thinking of\nAPIs when I was first looking for a controller, so I was very glad that I wouldn't have to buy a new one to make this work.\n\nFast forward some time, I wrote the script in this repository, and now:\n- I can walk in the room and the lights turn on\n- I can walk out of the room and the lights turn off\n- I added turning the light off to my \"hey google, good night\" routine, which is the only time I'd want to change the power of the light while still in the room\n\nOverall, I'm very happy with the result!\n\n### Footnotes\n\n† If you've never taken your ceiling light down before, in the top of the fan there are a few wires, and there are a few matching wires in the ceiling. You could directly \nconnect these if you are fine controlling the light/fan using the pull chains. If you want to use a remote, you need to use a fan controller to connect these two sets of\nwires. It is what recieves the signal from the remote.\n\n†† Depending on when the room was last renovated, this might not be neccessary. My ceiling fan was the original fan from when the house was built in the mid 90s,\nand it did not have enough room to physically fit the new controller. If you aren't sure if yours is big enough, I recommend assuming it is and taking a trip to Home Depot\nif it turns out it is not. It is difficult to go off of provided measurements since a lot of controllers aren't uniform rectangular prisms, and you'd most likely have to take\nthe fan down anyway unless you know the inner dimensions of your fan.\n\n††† In college, given that I was in a class of CS majors and not EE majors, we were all advised to use a small resistor between our power source and whatever we put on the\nbreadboard because if accidentally made a short circuit, it would heat up the resistor instead of frying our supplies (which they could not afford to replace). If you were\ngiven similar advice, you should take the resistor out before doing this. I found that it dropped the voltage too much, and my GPIO pins weren't detecting the sensors going \noff unless they had a full 5V as a source.\n"}}]}}}}]}}}