{"data":{"allGithubData":{"nodes":[{"data":{"user":{"pinnedItems":{"nodes":[{"name":"homelab-provisioner","description":"Creates virtual machines and DNS records for my homelab","homepageUrl":"","url":"https://github.com/jpitlor/homelab-provisioner","object":{"text":"# Homelab Provisioner\r\n\r\nTechnologies Used: OpenTofu (Terraform), Google Cloud (GCP), Cloudflare DNS, Proxmox\r\n\r\n# Prerequisites\r\n\r\n- [Google Cloud Platform](https://console.cloud.google.com/) account\r\n  - The name of the project you want to create in GCP\r\n- Machine running [Proxmox](https://www.proxmox.com/en/downloads)\r\n  - URL\r\n  - Account credentials\r\n- [OpenTofu](https://opentofu.org/docs/intro/install/) installed\r\n\r\n# Bootstrap\r\n\r\nFirst, authenticate with Google Cloud. The easiest way to do this is\r\nby installing [the CLI](https://cloud.google.com/sdk/docs/install).\r\n\r\nNext, go into the `bootstrap-1-project` folder, and prepare the variable\r\nfiles.\r\n\r\n```shell\r\ncd bootstrap-1-project\r\ncp .env.example .env\r\ncp terraform.tfvars.example terraform.tfvars\r\n```\r\n\r\nGo into the newly created `.env` and `terraform.tfvars` and change the \r\nparts that say `CHANGEME`. Then, run OpenTofu. This should create the \r\nproject in GCP.\r\n\r\n```shell\r\nsource .env\r\ntofu init\r\ntofu apply\r\n```\r\n\r\nNow, you need to move on to the second half of bootstrapping, creating\r\nthe bucket that will ultimately be used for the main OpenTofu state file\r\n\r\n```shell\r\ncd ../bootstrap-2-project\r\ntofu init\r\ntofu apply\r\ncd ..\r\n```\r\n\r\n# Usage\r\n\r\nFirst, you'll need to fill in the variables\r\n\r\n```shell\r\ncp terraform.tfvars.example terraform.tfvars\r\n```\r\n\r\nGo into the newly created `terraform.tfvars` and update all the\r\nvalues that say `CHANGEME`. Then, simply run:\r\n\r\n```shell\r\nsource .env\r\ntofu init\r\ntofu apply\r\n```\r\n\r\nTODO: Make this happen automatically in Gitea in the nuc\r\n\r\n# Non-managed Resources\r\n\r\n## Windows\r\n\r\nFirst, copy the example unattend file:\r\n\r\n```shell\r\ncp autounattend.example.xml autounattend.xml\r\n```\r\n\r\nThen, look for `CHANGEME-PASSWORD` and replace it with your actual password.\r\nOptionally, look for `fanny-brice` and replace it with the computer name\r\nyou want. Format a USB drive with a [Windows ISO](https://www.microsoft.com/software-download/windows11),\r\nthen add `autounattend.xml` to the flash drive.\r\n\r\nPlug in, turn on, have fun.\r\n\r\n## Linux\r\n\r\nYou should be able to use the `cloud-config.yml` file to configure a Linux\r\nPC, but I'm not researching exact instructions since I don't have any non-server\r\nLinux machines.\r\n\r\n## MacOS \r\n\r\nWhy are you even reading this repo? Just go do things the Apple way and\r\nexperience their beautiful installer\r\n"}},{"name":"homelab-configuration","description":"Ansible playbooks to manage virtual machines","homepageUrl":"","url":"https://github.com/jpitlor/homelab-configuration","object":{"text":"# Homelab Configuration\n\nTechnologies Used: Ansible, Packer \n\n## Usage\n\n```shell\nansible-galaxy install -r requirements.yml\npip3 install -r requirements.txt\ncd packer\npacker build -except='proxmox-clone.*' .\npacker build -only='proxmox-clone.*' --parallel-builds=1 .\n```\n\nnetsh interface portproxy add v4tov4 listenport=8081 listenaddress=0.0.0.0 connectport=8081 connectaddress=$(wsl hostname -I)\n"}},{"name":"homelab-chart","description":"A Helm chart of applications I self-host","homepageUrl":"","url":"https://github.com/jpitlor/homelab-chart","object":{"text":"# Homelab Chart\n\nTechnologies Used: Helm, Kubernetes, Minio\n\n## Pushing New Versions\n\n```shell\ngcloud auth application-default print-access-token | helm registry login -u oauth2accesstoken --password-stdin https://us-central1-docker.pkg.dev\nhelm package .\nhelm push <FILE> oci://us-central1-docker.pkg.dev/dev-pitlor-homelab/homelab-chart\n```\n"}}]}}}}]}}}